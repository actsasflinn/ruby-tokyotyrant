= TokyoTyrant Ruby Client

This is an _EXPERIMENTAL_ c extension for Ruby to access TokyoTyrant databases.  It currently supports key/value, table databases and table queries.

== Performance

This is not in production but the initial benchmarks are very interesting. Results look closer to the memcached gem than any other tyrant client I've seen for Ruby.

* Key/Value Store: http://gist.github.com/75212
* Table Store: http://gist.github.com/74116
* Bulk Operations: http://gist.github.com/83194
* Bulk Table Operations: http://gist.github.com/87215

== Example 

=== Hash DB

  # start tyrant like so:
  # ttserver example.tch

  require 'tokyo_tyrant'
  db = TokyoTyrant::DB.new('127.0.0.1', 1978)

  db['foo'] = 'Bar' # => "Bar"
  db['foo']         # => "Bar"

  db.each{ |k,v| puts [k, v].inspect }
  # ["foo", "Bar"]
  # => nil

  db.mput("1"=>"number_1", "2"=>"number_2", "3"=>"number_3", "4"=>"number_4", "5"=>"number_5")
  db.mget(1..3) # => {"1"=>"number_1", "2"=>"number_2", "3"=>"number_3"}

=== Table DB

  # start tyrant like so:
  # ttserver example.tct

  require 'tokyo_tyrant'
  t = TokyoTyrant::Table.new('127.0.0.1', 1978)

  t['bar'] = { 'baz' => 'box' } # => { 'baz' => 'box' }
  t['bar']                      # => { 'baz' => 'box' }

  t.each{ |k,v| puts [k, v].inspect }
  # ["bar", {"baz"=>"box"}]
  # => nil

  # bulk operations
  h = {}
  100.times do |i|
    h[i] = { 'name' => 'Pat', 'sex' => i % 2 > 0 ? 'male' : 'female' }
  end
  t.mput(h)
  t.mget(0..3)
  # => {"0"=>{"name"=>"Pat", "sex"=>"female"}, "1"=>{"name"=>"Pat", "sex"=>"male"}, "2"=>{"name"=>"Pat", "sex"=>"female"}, "3"=>{"name"=>"Pat", "sex"=>"male"}}

=== Table Query

  require 'tokyo_tyrant'
  t = TokyoTyrant::Table.new('127.0.0.1', 1978)

  100.times do |i|
    t[i] = { 'name' => 'Pat', 'sex' => i % 2 > 0 ? 'male' : 'female' }
  end

  q = TokyoTyrant::Query.new(t)
  q.addcond('sex', :streq, 'male')
  q.limit(5)
  # Get a list of IDs
  ids = q.search
  # => ["1", "3", "5", "7", "9"]
  # Get the actual records
  q.get
  # => [{"name"=>"Pat", ""=>"1", "sex"=>"male"}, {"name"=>"Pat", ""=>"3", "sex"=>"male"}, {"name"=>"Pat", ""=>"5", "sex"=>"male"}, {"name"=>"Pat", ""=>"7", "sex"=>"male"}, {"name"=>"Pat", ""=>"9", "sex"=>"male"}]

== TODO
* implement get_reverse for has_value?
* fix up and test extensions
* Query DB Specs
